window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "practicuscore", "modulename": "practicuscore", "kind": "module", "doc": "<h1 id=\"practicus-ai-core-library\">Practicus AI Core Library</h1>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>Practicus AI Core library allows you to work on DataFrames, Practicus AI Workers and more.</p>\n\n<p><a href=\"https://docs.practicus.ai\">Practicus AI Documentation</a></p>\n\n<h3 id=\"sample-usage\">Sample Usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">practicuscore</span> <span class=\"k\">as</span> <span class=\"nn\">prt</span>\n\n<span class=\"n\">prt</span><span class=\"o\">.</span><span class=\"n\">some_operation</span><span class=\"p\">()</span>\n<span class=\"n\">prt</span><span class=\"o\">.</span><span class=\"n\">some_other_operation</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h3 id=\"regions-helper\">Regions helper</h3>\n\n<p>practicuscore.regions</p>\n\n<h3 id=\"engines-helper\">Engines helper</h3>\n\n<p>practicuscore.engines</p>\n"}, {"fullname": "practicuscore.regions", "modulename": "practicuscore", "qualname": "regions", "kind": "class", "doc": "<p>Convenience class to manage region related functionality.\nWraps and simplifies practicuscore.region_manager.Region</p>\n"}, {"fullname": "practicuscore.regions.running_on_a_worker", "modulename": "practicuscore", "qualname": "regions.running_on_a_worker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.login", "modulename": "practicuscore", "qualname": "regions.login", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_password</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">access_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_config</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.logout", "modulename": "practicuscore", "qualname": "regions.logout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_regions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_region_list", "modulename": "practicuscore", "qualname": "regions.get_region_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">PrtList</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_region", "modulename": "practicuscore", "qualname": "regions.get_region", "kind": "function", "doc": "<p>Returns the requested region. If no specific region is requested, returns the default region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in username@region_address or only region_address format.\nE.g. 'alice@practicus.wonderland.com' or just 'practicus.wonderland.com; if there's only one logged in user for this region</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_default_region", "modulename": "practicuscore", "qualname": "regions.get_default_region", "kind": "function", "doc": "<p>Returns the default region configured by logging in using the App or SDK.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.current_region", "modulename": "practicuscore", "qualname": "regions.current_region", "kind": "function", "doc": "<p>Returns the current region: If this code is running on a Worker, returns the region of this worker.\nIf the code is running elsewhere, returns the default region configured.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.region_factory", "modulename": "practicuscore", "qualname": "regions.region_factory", "kind": "function", "doc": "<p>Instantiates a region using worker configuration, or returns default region if no configuration provided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Path of worker configuration json, a json string, dictionary, or none if you would like to use default region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.set_default_region", "modulename": "practicuscore", "qualname": "regions.set_default_region", "kind": "function", "doc": "<p>Changes the default region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in 'username@region_address' or 'region_address' format.\nE.g. 'alice@practicus.wonderland.com' or 'practicus.wonderland.com' if there's only one logged in user for this region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_local_worker", "modulename": "practicuscore", "qualname": "regions.get_local_worker", "kind": "function", "doc": "<p>Gets a reference to the Practicus AI Worker that this code is running on.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.create_worker", "modulename": "practicuscore", "qualname": "regions.create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod using the current region.\nTo use a different region, instantiate a region and call it's create_worker() method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n<li><strong>wait_until_ready</strong>:  Waits until worker gets ready</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wait_until_ready</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.create_workspace", "modulename": "practicuscore", "qualname": "regions.create_workspace", "kind": "function", "doc": "<p>Creates a new Practicus AI Workspace by launching a new Kubernetes pod and current or remote region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Workspace configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of type workspace of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_or_create_worker", "modulename": "practicuscore", "qualname": "regions.get_or_create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod using the current region.\nTo use a different region, instantiate a region and call it's create_worker() method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.run_task", "modulename": "practicuscore", "qualname": "regions.run_task", "kind": "function", "doc": "<p>Runs a task on a 'remote worker'. A task can be any type of code, including Practicus AI generated.\nPlease do not call this method to run code on current worker.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  A .py python or .sh script file to run on the worker</li>\n<li><strong>files_path</strong>:  Directory of all the files to upload to remote worker, code files, configuration files.\nLeave empty for current directory.</li>\n<li><strong>worker_config</strong>:  Remote worker configuration</li>\n<li><strong>terminate_on_completion</strong>:  Terminate the worker that was created to run the task.</li>\n<li><strong>capture_task_output</strong>:  If True, captures and logs stdout and stderr of the task .sh script or .py code.</li>\n<li><strong>python_venv_name</strong>:  If set, uses the python virtual environment located under ~/.venv/</li>\n<li><strong>max_files_to_upload</strong>:  Maximum number of task files to upload to worker from the files_path.\nPlease increase with caution, and prefer to place larger number of files to:\n1) on my/shared folders or 2) on git and pull after worker is started.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple of (Worker that was created to run the task, task success boolean)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminate_on_completion</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">capture_task_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">python_venv_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_files_to_upload</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.auto_login", "modulename": "practicuscore", "qualname": "regions.auto_login", "kind": "function", "doc": "<p>Logs-in to Practicus AI, if the SDK is running on a Practicus AI compatible system such as Worker, Workspace etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.change_password", "modulename": "practicuscore", "qualname": "regions.change_password", "kind": "function", "doc": "<p>Changes the current logged in users password</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_password</strong>:  Old Password</li>\n<li><strong>new_password</strong>:  New Password</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_access_token", "modulename": "practicuscore", "qualname": "regions.get_access_token", "kind": "function", "doc": "<p>Gets an access token with current saved refresh token</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_refresh_and_access_token", "modulename": "practicuscore", "qualname": "regions.get_refresh_and_access_token", "kind": "function", "doc": "<p>Gets a refresh and access token after logging-in saved credentials</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.get_workspace_credentials", "modulename": "practicuscore", "qualname": "regions.get_workspace_credentials", "kind": "function", "doc": "<p>Returns the login password for the selected workspace.\nWorkspace Username will be your username, which is usually the user in your email E.g. this_part@company.com</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance_id</strong>:  The instance id of the workspace. You can view by calling region.worker_list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(Workspace username, password)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.regions.reset_password", "modulename": "practicuscore", "qualname": "regions.reset_password", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password_reset_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth", "modulename": "practicuscore", "qualname": "auth", "kind": "class", "doc": "<p>Convenience class to manage authentication/authorization functionality.\nOnly includes aliases to other classes.</p>\n"}, {"fullname": "practicuscore.auth.set_default_region", "modulename": "practicuscore", "qualname": "auth.set_default_region", "kind": "function", "doc": "<p>Changes the default region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in 'username@region_address' or 'region_address' format.\nE.g. 'alice@practicus.wonderland.com' or 'practicus.wonderland.com' if there's only one logged in user for this region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.login", "modulename": "practicuscore", "qualname": "auth.login", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_password</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">access_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_config</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.logout", "modulename": "practicuscore", "qualname": "auth.logout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_regions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.auto_login", "modulename": "practicuscore", "qualname": "auth.auto_login", "kind": "function", "doc": "<p>Logs-in to Practicus AI, if the SDK is running on a Practicus AI compatible system such as Worker, Workspace etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.change_password", "modulename": "practicuscore", "qualname": "auth.change_password", "kind": "function", "doc": "<p>Changes the current logged in users password</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_password</strong>:  Old Password</li>\n<li><strong>new_password</strong>:  New Password</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.reset_password", "modulename": "practicuscore", "qualname": "auth.reset_password", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password_reset_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.get_workspace_credentials", "modulename": "practicuscore", "qualname": "auth.get_workspace_credentials", "kind": "function", "doc": "<p>Returns the login password for the selected workspace.\nWorkspace Username will be your username, which is usually the user in your email E.g. this_part@company.com</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance_id</strong>:  The instance id of the workspace. You can view by calling region.worker_list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(Workspace username, password)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.get_access_token", "modulename": "practicuscore", "qualname": "auth.get_access_token", "kind": "function", "doc": "<p>Gets an access token with current saved refresh token</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.auth.get_refresh_and_access_token", "modulename": "practicuscore", "qualname": "auth.get_refresh_and_access_token", "kind": "function", "doc": "<p>Gets a refresh and access token after logging-in saved credentials</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.engines", "modulename": "practicuscore", "qualname": "engines", "kind": "class", "doc": "<p>Convenience class to manage data engines such as Spark.\nWraps and simplifies functionality of engine_helper.py file classes</p>\n"}, {"fullname": "practicuscore.engines.get_spark_session", "modulename": "practicuscore", "qualname": "engines.get_spark_session", "kind": "function", "doc": "<p>Creates Spark Session</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn_conf</strong>:  Optional Data connection config as a dictionary, json string or path to a json file</li>\n<li><strong>extra_spark_conf</strong>:  Optional extra spark session settings</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Spark Session object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn_conf</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_spark_conf</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">SparkSession</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.engines.delete_spark_session", "modulename": "practicuscore", "qualname": "engines.delete_spark_session", "kind": "function", "doc": "<p>Deletes the Spark session Practicus AI created.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.experiments", "modulename": "practicuscore", "qualname": "experiments", "kind": "class", "doc": "<p>Convenience class to manage ML experiments.\nWraps and simplifies functionality of experiment_helper.py classes</p>\n"}, {"fullname": "practicuscore.experiments.configure", "modulename": "practicuscore", "qualname": "experiments.configure", "kind": "function", "doc": "<p>Configures Experiment service such as MLFlow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>service_name</strong>:  Practicus AI experiment service name</li>\n<li><strong>service_key</strong>:  Practicus AI experiment service key</li>\n<li><strong>experiment_name</strong>:  Optional experiment name if you would like to also start or set an experiment</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">service_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">experiment_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.workflows", "modulename": "practicuscore", "qualname": "workflows", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "practicuscore.workflows.logger", "modulename": "practicuscore", "qualname": "workflows.logger", "kind": "variable", "doc": "<p>Convenience class to manage Workflows such as Airflow DAGS\nWraps and simplifies functionality of workflow_helper.py classes</p>\n", "default_value": "&lt;Logger practicus.core.airflow (DEBUG)&gt;"}, {"fullname": "practicuscore.workflows.deploy", "modulename": "practicuscore", "qualname": "workflows.deploy", "kind": "function", "doc": "<p>Deploys a workflow to current region.\nTo deploy on another region, please create a region instance and call region.deploy_workflow() instead</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>service_key</strong>:  Workflow service key, as defined by your admin</li>\n<li><strong>dag_key</strong>:  Workflow DAG (Directed Acyclic Graph) key</li>\n<li><strong>files_path</strong>:  Files directory, or None for current dir</li>\n<li><strong>max_files_to_upload</strong>:  Maximum number of files to upload for tasks, DAG and supporting files</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">service_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dag_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_files_to_upload</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.workflows.get_airflow_params", "modulename": "practicuscore", "qualname": "workflows.get_airflow_params", "kind": "function", "doc": "<p>Returns Airflow DAG parameters that can be used to pass Practicus AI worker parameters\nsuch as service location, worker size etc.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Airflow params dictionary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.workflows.run_airflow_task", "modulename": "practicuscore", "qualname": "workflows.run_airflow_task", "kind": "function", "doc": "<p>Runs an Airflow task inside a DAG. This method is not intended to be used by itself.\nPlease view generated code for Airflow, or the documentation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Dynamic Airflow dag Task params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.workflows.get_dag_info", "modulename": "practicuscore", "qualname": "workflows.get_dag_info", "kind": "function", "doc": "<p>Gets dag_key and the username used in git repo</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dag_file_path</strong>:  Dag file full path, you can pass __file__ if you're running this inside a DAG file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple of dag_key and username E.g. ('my_workflow', 'alice')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dag_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.workflows.generate_files", "modulename": "practicuscore", "qualname": "workflows.generate_files", "kind": "function", "doc": "<p>Generates task placeholders, worker configuration files, DAG etc. to run an airflow workflow\nYou can customize</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dag_key</strong>:  Choose a DAG key describing the overall workflow</li>\n<li><strong>dag_flow</strong>:  Task flow and dependency.\nTo learn more visit <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html\">https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html</a></li>\n<li><strong>files_path</strong>:  Where to generate the files</li>\n<li><strong>default_worker_config</strong>:  The default worker configuration file that applies to all tasks.</li>\n<li><strong>custom_worker_configs</strong>:  If a task needs to run on a different worker configuration,\ndefine by passing a list of tuples E.g.  [ ('task_name', worker_config), ... ]</li>\n<li><strong>save_credentials</strong>:  Saves current users email and refresh_token to the default worker config</li>\n<li><strong>overwrite_existing</strong>:  Overwrite existing files or not</li>\n<li><strong>schedule_interval</strong>:  Workflow schedule. E.g. @daily, 2 Am every thursday 0 2 * * THU  ..</li>\n<li><strong>start_date</strong>:  Airflow DAG start date and time</li>\n<li><strong>retries</strong>:  Number of retries before task fails</li>\n<li><strong>dag_template</strong>:  Jinja template to generate DAG</li>\n<li><strong>task_template</strong>:  Jinja template to generate task files</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dag_flow</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">custom_worker_configs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_credentials</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite_existing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">schedule_interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">dag_template</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;airflow_dag.j2.py&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">task_template</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;python_task.j2.py&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.workflows.test_tasks", "modulename": "practicuscore", "qualname": "workflows.test_tasks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag_flow</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">task_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">custom_worker_configs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminate_on_success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">terminate_on_failed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models", "modulename": "practicuscore", "qualname": "models", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "practicuscore.models.logger", "modulename": "practicuscore", "qualname": "models.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger practicus.core.sdk (DEBUG)&gt;"}, {"fullname": "practicuscore.models.ModelConfig", "modulename": "practicuscore", "qualname": "models.ModelConfig", "kind": "class", "doc": "<p>Convenience class to manage ML model management</p>\n", "bases": "practicuscore.api_base.PrtBaseModel"}, {"fullname": "practicuscore.models.deploy", "modulename": "practicuscore", "qualname": "models.deploy", "kind": "function", "doc": "<p>Deploys a model to current region.\nTo deploy on another region, please create a region instance and call region.deploy_model()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>deployment_key</strong>:  Deployment key, as defined by your admin</li>\n<li><strong>prefix</strong>:  Model prefix</li>\n<li><strong>model_name</strong>:  Model name</li>\n<li><strong>model_dir</strong>:  Model files directory, or None for current dir</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">deployment_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.get_session_token", "modulename": "practicuscore", "qualname": "models.get_session_token", "kind": "function", "doc": "<p>Get a 'short lived' session model API token to make predictions, or upload models.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_url: The url of the model api. E.g. https</strong>: //practicus.company.com/models/my-model/</li>\n<li><strong>for_upload</strong>:  If the token is for uploading a model version, admin permissions will be needed</li>\n<li><strong>retry</strong>:  retry count</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Token, if successful</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">for_upload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.load_config", "modulename": "practicuscore", "qualname": "models.load_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_def</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.get_mlflow_data_type", "modulename": "practicuscore", "qualname": "models.get_mlflow_data_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">col_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;DataType&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.get_model_signature", "modulename": "practicuscore", "qualname": "models.get_model_signature", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;ModelSignature&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.get_model_signature_json", "modulename": "practicuscore", "qualname": "models.get_model_signature_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.create_model_config", "modulename": "practicuscore", "qualname": "models.create_model_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">problem_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">version_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">final_model</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_def</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.zip", "modulename": "practicuscore", "qualname": "models.zip", "kind": "function", "doc": "<p>Creates and adds selected files to model.zip archive.\nDeletes existing zip file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>files_to_add</strong>:  List of file names to add to the zip file</li>\n<li><strong>model_dir</strong>:  Model files directory, or None for current dir</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">files_to_add</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">model_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.models.unzip", "modulename": "practicuscore", "qualname": "models.unzip", "kind": "function", "doc": "<p>Unzips existing model.zip file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_dir</strong>:  Model files directory, or None for current dir</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps", "modulename": "practicuscore", "qualname": "apps", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "practicuscore.apps.logger", "modulename": "practicuscore", "qualname": "apps.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger practicus.core.apps (DEBUG)&gt;"}, {"fullname": "practicuscore.apps.secure_page", "modulename": "practicuscore", "qualname": "apps.secure_page", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">page_title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;centered&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wide&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;centered&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">initial_sidebar_state</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;auto&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;expanded&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;collapsed&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">menu_items</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;Get help&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Get Help&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;get help&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Report a bug&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;report a bug&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;About&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;about&#39;</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disable_authentication</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">must_be_admin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_user_id", "modulename": "practicuscore", "qualname": "apps.get_user_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_username", "modulename": "practicuscore", "qualname": "apps.get_username", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_user_email", "modulename": "practicuscore", "qualname": "apps.get_user_email", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_user_groups", "modulename": "practicuscore", "qualname": "apps.get_user_groups", "kind": "function", "doc": "<p>Gets user groups: if in development mode, gets the groups of developer, after deployment, gets the group of\nlogged-in user</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>reload</strong>:  If True, reloads groups and ignores cache</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of user groups</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reload</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.user_is_admin", "modulename": "practicuscore", "qualname": "apps.user_is_admin", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_app_id", "modulename": "practicuscore", "qualname": "apps.get_app_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_app_prefix", "modulename": "practicuscore", "qualname": "apps.get_app_prefix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_app_name", "modulename": "practicuscore", "qualname": "apps.get_app_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_app_version", "modulename": "practicuscore", "qualname": "apps.get_app_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.development_mode", "modulename": "practicuscore", "qualname": "apps.development_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.set_cookie", "modulename": "practicuscore", "qualname": "apps.set_cookie", "kind": "function", "doc": "<p>Sets HTML cookie</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Cookie item</li>\n<li><strong>value</strong>:  Cookie value</li>\n<li><strong>max_age</strong>:  Number of seconds until cookie expires. Default is 30 days (2592000 seconds)</li>\n<li><strong>path</strong>:  The path that the cookie is valid for. For app specific and sensitive information set a restricting path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">max_age</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">2592000</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_cookie", "modulename": "practicuscore", "qualname": "apps.get_cookie", "kind": "function", "doc": "<p>Get current HTML cookie value</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Name of the cookie</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Cookie value or None if not found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.delete_cookie", "modulename": "practicuscore", "qualname": "apps.delete_cookie", "kind": "function", "doc": "<p>Convenience class to manage App lifecycle</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.deploy", "modulename": "practicuscore", "qualname": "apps.deploy", "kind": "function", "doc": "<p>Deploys an app to current region.\nTo deploy on another region, please create a region instance and call region.deploy_app()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>deployment_setting_key</strong>:  Deployment setting key, as defined by your admin</li>\n<li><strong>prefix</strong>:  app prefix</li>\n<li><strong>app_name</strong>:  App name</li>\n<li><strong>app_dir</strong>:  App files directory, or None for current dir</li>\n<li><strong>visible_name</strong>:  The app name that end users see</li>\n<li><strong>description</strong>:  Short description of what the app does</li>\n<li><strong>icon</strong>:  Font awesome icon name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[URL of UI, URL of API]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">deployment_setting_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">visible_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.get_session_token", "modulename": "practicuscore", "qualname": "apps.get_session_token", "kind": "function", "doc": "<p>Get a 'short lived' session model API token to make predictions, or upload models.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_url: The API url of the app. E.g. https</strong>: //practicus.company.com/apps/my-app/api/v5/</li>\n<li><strong>app_id</strong>:  The unique key opf the app. You can use this instead of api_url</li>\n<li><strong>for_upload</strong>:  If the token is for uploading a model version, admin permissions will be needed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Token, if successful</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">for_upload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.test_app", "modulename": "practicuscore", "qualname": "apps.test_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">kill_existing_app</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.call_api", "modulename": "practicuscore", "qualname": "apps.call_api", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_module</span><span class=\"p\">:</span> <span class=\"n\">module</span>, </span><span class=\"param\"><span class=\"n\">payload</span>, </span><span class=\"param\"><span class=\"n\">is_admin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.delete", "modulename": "practicuscore", "qualname": "apps.delete", "kind": "function", "doc": "<p>Deletes an app at the current region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app_id</strong>:  App id number. If provided, only this number is used and other params are ignored</li>\n<li><strong>prefix</strong>:  App prefix, if App id is not known.</li>\n<li><strong>app_name</strong>:  App name, if App id is not known.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Nothing if successful, or else raises an exception</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.apps.delete_version", "modulename": "practicuscore", "qualname": "apps.delete_version", "kind": "function", "doc": "<p>Deletes an app version at the current region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>version</strong>:  App version to delete</li>\n<li><strong>app_id</strong>:  App id number. If provided, only this number is used and other params are ignored</li>\n<li><strong>prefix</strong>:  App prefix, if App id is not known.</li>\n<li><strong>app_name</strong>:  App name, if App id is not known.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Nothing if successful, or else raises an exception</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks", "modulename": "practicuscore", "qualname": "notebooks", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "practicuscore.notebooks.logger", "modulename": "practicuscore", "qualname": "notebooks.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger practicus.core.notebooks (DEBUG)&gt;"}, {"fullname": "practicuscore.notebooks.default_output_folder", "modulename": "practicuscore", "qualname": "notebooks.default_output_folder", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "practicuscore.notebooks.default_failed_output_folder", "modulename": "practicuscore", "qualname": "notebooks.default_failed_output_folder", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "practicuscore.notebooks.successful_notebooks", "modulename": "practicuscore", "qualname": "notebooks.successful_notebooks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "practicuscore.notebooks.failed_notebooks", "modulename": "practicuscore", "qualname": "notebooks.failed_notebooks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "practicuscore.notebooks.home_dir", "modulename": "practicuscore", "qualname": "notebooks.home_dir", "kind": "variable", "doc": "<p>Convenience class to manage Notebooks interaction</p>\n", "default_value": "$HOME"}, {"fullname": "practicuscore.notebooks.configure", "modulename": "practicuscore", "qualname": "notebooks.configure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_failed_output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">add_time_stamp_to_output</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">reset_history</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks.reset_history", "modulename": "practicuscore", "qualname": "notebooks.reset_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks.view_history", "modulename": "practicuscore", "qualname": "notebooks.view_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks.validate_history", "modulename": "practicuscore", "qualname": "notebooks.validate_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks.get_venv_name", "modulename": "practicuscore", "qualname": "notebooks.get_venv_name", "kind": "function", "doc": "<p>Gets the current virtual environment name.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Current venv name. System python returns as \"practicus\"</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks.validate_venv", "modulename": "practicuscore", "qualname": "notebooks.validate_venv", "kind": "function", "doc": "<p>Validates the virtual environment name the code runs in. If named \"practicus\" system interpreter will also work</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>venv_name</strong>:  Virtual env name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">venv_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.notebooks.execute_notebook", "modulename": "practicuscore", "qualname": "notebooks.execute_notebook", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_path</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">failed_output_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raise_on_failure</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed", "modulename": "practicuscore", "qualname": "distributed", "kind": "class", "doc": "<p>Convenience class to manage distributed workloads</p>\n"}, {"fullname": "practicuscore.distributed.JobType", "modulename": "practicuscore", "qualname": "distributed.JobType", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;enum &#x27;DistJobType&#x27;&gt;"}, {"fullname": "practicuscore.distributed.JobConfig", "modulename": "practicuscore", "qualname": "distributed.JobConfig", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;practicuscore.api_base.DistJobConfig&#x27;&gt;"}, {"fullname": "practicuscore.distributed.wait_for_start", "modulename": "practicuscore", "qualname": "distributed.wait_for_start", "kind": "function", "doc": "<p>Waits for all executors to start, but not necessarily actively running.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_dir</strong>:  Distributed job directory. If none, expects to run on the job cluster.</li>\n<li><strong>job_id</strong>:  Distributed job id. If none, expects to run on the job cluster.</li>\n<li><strong>timeout</strong>:  Time out seconds</li>\n<li><strong>sleep_between_refresh</strong>:  How often to refresh live view, in seconds.</li>\n<li><strong>log_state</strong>:  If True logs the start status</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>,</span><span class=\"param\">\t<span class=\"n\">sleep_between_refresh</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">log_state</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.wait_for_running", "modulename": "practicuscore", "qualname": "distributed.wait_for_running", "kind": "function", "doc": "<p>Waits for all executors to be in running state. Useful for interactive clusters where you would like to make sure\nall executors are running before getting a client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_dir</strong>:  Distributed job directory. If none, expects to run on the job cluster.</li>\n<li><strong>job_id</strong>:  Distributed job id. If none, expects to run on the job cluster.</li>\n<li><strong>timeout</strong>:  Time out seconds</li>\n<li><strong>sleep_between_refresh</strong>:  How often to refresh live view, in seconds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>,</span><span class=\"param\">\t<span class=\"n\">sleep_between_refresh</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.live_view", "modulename": "practicuscore", "qualname": "distributed.live_view", "kind": "function", "doc": "<p>Opens a live view inside a Jupyter notebook in Jupyter Lab or VS Code.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_dir</strong>:  Distributed job directory. If none, expects to run on the job cluster.</li>\n<li><strong>job_id</strong>:  Distributed job id. If none, expects to run on the job cluster.</li>\n<li><strong>max_rows</strong>:  Maximum number of rows to show in executor details table.</li>\n<li><strong>sleep_between_refresh</strong>:  How often to refresh live view, in seconds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">sleep_between_refresh</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.view_log", "modulename": "practicuscore", "qualname": "distributed.view_log", "kind": "function", "doc": "<p>Views executor worker logs for a distributed job.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_dir</strong>:  Distributed job directory. If none, expects to run on the job cluster.</li>\n<li><strong>job_id</strong>:  Distributed job id. If none, expects to run on the job cluster.</li>\n<li><strong>rank</strong>:  Executor worker's rank for the distributed job. If none, expects to run on the job cluster.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.get_client", "modulename": "practicuscore", "qualname": "distributed.get_client", "kind": "function", "doc": "<p>Get a client (or session) to connect to an interactive cluster such as Spark or Dask.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_dir</strong>:  Distributed job directory. If none, expects to run on the coordinator (master) worker.</li>\n<li><strong>job_id</strong>:  Distributed job id. If none, expects to run on the coordinator (master) worker.</li>\n<li><strong>conn_conf</strong>:  Optional connection configuration to set credentials, e.g. to set S3 credentials for Spark session</li>\n<li><strong>config_dict</strong>:  Optional configuration to set or override defaults</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dask client, Spark session etc.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conn_conf</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">ConnConf</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.open_dashboard", "modulename": "practicuscore", "qualname": "distributed.open_dashboard", "kind": "function", "doc": "<p>Opens the management dashboard of interactive clusters such as Spark and Dask.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_dir</strong>:  Distributed job directory. If none, expects to run on the job cluster.</li>\n<li><strong>job_id</strong>:  Distributed job id. If none, expects to run on the job cluster.</li>\n<li><strong>get_url_only</strong>:  Only returns url and does not open in browser.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The url</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">get_url_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.get_job_id", "modulename": "practicuscore", "qualname": "distributed.get_job_id", "kind": "function", "doc": "<p>Active Job id of this worker, if this worker is part of a job, else None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.get_job_rank", "modulename": "practicuscore", "qualname": "distributed.get_job_rank", "kind": "function", "doc": "<p>Active Job rank of this worker, if this worker is part of a job, else None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.get_gpu_count", "modulename": "practicuscore", "qualname": "distributed.get_gpu_count", "kind": "function", "doc": "<p>Number of GPUs on this worker</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.running_on_a_cluster", "modulename": "practicuscore", "qualname": "distributed.running_on_a_cluster", "kind": "function", "doc": "<p>Returns True if this code is running on a worker which is part of a Distributed Job/Cluster</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.is_coordinator", "modulename": "practicuscore", "qualname": "distributed.is_coordinator", "kind": "function", "doc": "<p>Returns True if this code runs on a worker which is part of a Distributed Job/Cluster and its job rank == 0\n(i.e. coordinator/master)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.is_agent", "modulename": "practicuscore", "qualname": "distributed.is_agent", "kind": "function", "doc": "<p>Returns True if this code runs on a worker which is part of a Distributed Job/Cluster and its job rank &gt;= 1\n(i.e. is a agent/worker, and not a coordinator/master)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.distributed.validate_job_dir", "modulename": "practicuscore", "qualname": "distributed.validate_job_dir", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">job_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.quality", "modulename": "practicuscore", "qualname": "quality", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "practicuscore.quality.check", "modulename": "practicuscore", "qualname": "quality.check", "kind": "function", "doc": "<p>Checks code quality (lint).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>paths</strong>:  List of paths to lint (files or directories). Leave none for current</li>\n<li><strong>config_path</strong>:  Path to the ruff configuration file (optional).</li>\n<li><strong>fix: Whether to apply fixes automatically (default</strong>:  False).</li>\n<li><strong>select</strong>:  List of error codes to select for linting (optional).</li>\n<li><strong>ignore</strong>:  List of error codes to ignore (optional).\n:return True if operation is successful, Otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fix</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">select</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ignore</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.quality.format", "modulename": "practicuscore", "qualname": "quality.format", "kind": "function", "doc": "<p>Formats code to improve code-quality and readability.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>paths</strong>:  List of paths to lint (files or directories). Leave none for current</li>\n<li><strong>config_path</strong>:  Path to the ruff configuration file (optional).</li>\n<li><strong>select</strong>:  List of error codes to select for linting (optional).</li>\n<li><strong>ignore</strong>:  List of error codes to ignore (optional).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">select</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ignore</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.connections", "modulename": "practicuscore", "qualname": "connections", "kind": "class", "doc": "<p>Convenience class to manage connections</p>\n"}, {"fullname": "practicuscore.connections.UploadS3Conf", "modulename": "practicuscore", "qualname": "connections.UploadS3Conf", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "practicuscore.connections.upload_to_s3", "modulename": "practicuscore", "qualname": "connections.upload_to_s3", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">upload_conf</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">UploadS3Conf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.get_logger", "modulename": "practicuscore", "qualname": "get_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">log_manager</span><span class=\"o\">.</span><span class=\"n\">Log</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.Log", "modulename": "practicuscore", "qualname": "Log", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "practicuscore.Log.CORE", "modulename": "practicuscore", "qualname": "Log.CORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.CORE: &#x27;practicus.core&#x27;&gt;"}, {"fullname": "practicuscore.Log.SDK", "modulename": "practicuscore", "qualname": "Log.SDK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.SDK: &#x27;practicus.core.sdk&#x27;&gt;"}, {"fullname": "practicuscore.Log.CLI", "modulename": "practicuscore", "qualname": "Log.CLI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.CLI: &#x27;practicus.core.cli&#x27;&gt;"}, {"fullname": "practicuscore.Log.WEB_SOCKET", "modulename": "practicuscore", "qualname": "Log.WEB_SOCKET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.WEB_SOCKET: &#x27;practicus.core.websocket&#x27;&gt;"}, {"fullname": "practicuscore.Log.ENGINES", "modulename": "practicuscore", "qualname": "Log.ENGINES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.ENGINES: &#x27;practicus.core.engines&#x27;&gt;"}, {"fullname": "practicuscore.Log.AIRFLOW", "modulename": "practicuscore", "qualname": "Log.AIRFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.AIRFLOW: &#x27;practicus.core.airflow&#x27;&gt;"}, {"fullname": "practicuscore.Log.APPS", "modulename": "practicuscore", "qualname": "Log.APPS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.APPS: &#x27;practicus.core.apps&#x27;&gt;"}, {"fullname": "practicuscore.Log.GEN_AI", "modulename": "practicuscore", "qualname": "Log.GEN_AI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.GEN_AI: &#x27;practicus.core.gen_ai&#x27;&gt;"}, {"fullname": "practicuscore.Log.TEST", "modulename": "practicuscore", "qualname": "Log.TEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.TEST: &#x27;practicus.core.test&#x27;&gt;"}, {"fullname": "practicuscore.Log.NOTEBOOKS", "modulename": "practicuscore", "qualname": "Log.NOTEBOOKS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.NOTEBOOKS: &#x27;practicus.core.notebooks&#x27;&gt;"}, {"fullname": "practicuscore.Log.DISTRIBUTED", "modulename": "practicuscore", "qualname": "Log.DISTRIBUTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Log.DISTRIBUTED: &#x27;practicus.core.distributed&#x27;&gt;"}, {"fullname": "practicuscore.set_logging_level", "modulename": "practicuscore", "qualname": "set_logging_level", "kind": "function", "doc": "<p>Sets the new logging level.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>log_level</strong>:  New logging level. DEBUG, INFO etc.</li>\n<li><strong>modules_log_level: Logging level for particular modules, e.g. practicus:DEBUG, urllib3:DEBUG .. Use *</strong>: DEBUG for all modules.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">modules_log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig", "modulename": "practicuscore", "qualname": "WorkerConfig", "kind": "class", "doc": "<p>Defines a worker configuration. Sample usage</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">worker_config</span> <span class=\"o\">=</span> <span class=\"n\">WorkerConfig</span><span class=\"p\">(</span>\n    <span class=\"n\">worker_image</span><span class=\"o\">=</span><span class=\"s2\">&quot;practicus&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">worker_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;Small&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "practicuscore.WorkerConfig.worker_image", "modulename": "practicuscore", "qualname": "WorkerConfig.worker_image", "kind": "variable", "doc": "<p>Worker image to use. If a single word, e.g. <code>practicus-gpu-torch</code> converts to \n<code>ghcr.io/practicusai/practicus-gpu-torch</code> If no version is provided, current version is added automatically. \nYou can use <code>my-container-repo/my-container:some-version</code>. Please note that custom containers must be inherited \nfrom a base Practicus AI container image.</p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.worker_size", "modulename": "practicuscore", "qualname": "WorkerConfig.worker_size", "kind": "variable", "doc": "<p>Worker size defining CPU, RAM, GPU capacity.</p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.service_type", "modulename": "practicuscore", "qualname": "WorkerConfig.service_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.network_protocol", "modulename": "practicuscore", "qualname": "WorkerConfig.network_protocol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.distributed_config", "modulename": "practicuscore", "qualname": "WorkerConfig.distributed_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.api_base.DistJobConfig | None"}, {"fullname": "practicuscore.WorkerConfig.startup_script", "modulename": "practicuscore", "qualname": "WorkerConfig.startup_script", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.log_level", "modulename": "practicuscore", "qualname": "WorkerConfig.log_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.modules_log_level", "modulename": "practicuscore", "qualname": "WorkerConfig.modules_log_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.bypass_ssl_verification", "modulename": "practicuscore", "qualname": "WorkerConfig.bypass_ssl_verification", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.image_pull_policy", "modulename": "practicuscore", "qualname": "WorkerConfig.image_pull_policy", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.interactive", "modulename": "practicuscore", "qualname": "WorkerConfig.interactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool | None"}, {"fullname": "practicuscore.WorkerConfig.service_url", "modulename": "practicuscore", "qualname": "WorkerConfig.service_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.email", "modulename": "practicuscore", "qualname": "WorkerConfig.email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.refresh_token", "modulename": "practicuscore", "qualname": "WorkerConfig.refresh_token", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.WorkerConfig.validate_service_type", "modulename": "practicuscore", "qualname": "WorkerConfig.validate_service_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.validate_network_protocol", "modulename": "practicuscore", "qualname": "WorkerConfig.validate_network_protocol", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.validate_image_pull_policy", "modulename": "practicuscore", "qualname": "WorkerConfig.validate_image_pull_policy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.validate_model", "modulename": "practicuscore", "qualname": "WorkerConfig.validate_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.model_config", "modulename": "practicuscore", "qualname": "WorkerConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;validate_assignment&#x27;: True}"}, {"fullname": "practicuscore.WorkerConfig.model_validate", "modulename": "practicuscore", "qualname": "WorkerConfig.model_validate", "kind": "function", "doc": "<p>Validate a pydantic model instance.</p>\n\n<p>Args:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.</p>\n\n<p>Raises:\n    ValidationError: If the object could not be validated.</p>\n\n<p>Returns:\n    The validated model instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.model_validate_json", "modulename": "practicuscore", "qualname": "WorkerConfig.model_validate_json", "kind": "function", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/json/#json-parsing\">https://docs.pydantic.dev/2.9/concepts/json/#json-parsing</a></p>\n\n<p>Validate the given JSON data against the Pydantic model.</p>\n\n<p>Args:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.</p>\n\n<p>Returns:\n    The validated Pydantic model.</p>\n\n<p>Raises:\n    ValidationError: If <code>json_data</code> is not a JSON string or the object could not be validated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">json_data</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">bytes</span> <span class=\"o\">|</span> <span class=\"nb\">bytearray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.model_dump", "modulename": "practicuscore", "qualname": "WorkerConfig.model_dump", "kind": "function", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump\">https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump</a></p>\n\n<p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>\n\n<p>Args:\n    mode: The mode in which <code>to_python</code> should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of <code>None</code>.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [<code>PydanticSerializationError</code>][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p>\n\n<p>Returns:\n    A dictionary representation of the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.model_dump_json", "modulename": "practicuscore", "qualname": "WorkerConfig.model_dump_json", "kind": "function", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump_json\">https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump_json</a></p>\n\n<p>Generates a JSON representation of the model using Pydantic's <code>to_json</code> method.</p>\n\n<p>Args:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of <code>None</code>.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [<code>PydanticSerializationError</code>][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p>\n\n<p>Returns:\n    A JSON string representation of the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.WorkerConfig.model_fields", "modulename": "practicuscore", "qualname": "WorkerConfig.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;worker_image&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;worker_size&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;service_type&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;), &#x27;network_protocol&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;), &#x27;distributed_config&#x27;: FieldInfo(annotation=Union[DistJobConfig, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;startup_script&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;log_level&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;modules_log_level&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;bypass_ssl_verification&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;image_pull_policy&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;interactive&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None, description=&#x27;&#x27;, exclude=True), &#x27;service_url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;), &#x27;email&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;), &#x27;refresh_token&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;&#x27;)}"}, {"fullname": "practicuscore.WorkerConfig.model_computed_fields", "modulename": "practicuscore", "qualname": "WorkerConfig.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "practicuscore.running_on_a_worker", "modulename": "practicuscore", "qualname": "running_on_a_worker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.get_region_list", "modulename": "practicuscore", "qualname": "get_region_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">PrtList</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.get_region", "modulename": "practicuscore", "qualname": "get_region", "kind": "function", "doc": "<p>Returns the requested region. If no specific region is requested, returns the default region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in username@region_address or only region_address format.\nE.g. 'alice@practicus.wonderland.com' or just 'practicus.wonderland.com; if there's only one logged in user for this region</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.get_default_region", "modulename": "practicuscore", "qualname": "get_default_region", "kind": "function", "doc": "<p>Returns the default region configured by logging in using the App or SDK.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.current_region", "modulename": "practicuscore", "qualname": "current_region", "kind": "function", "doc": "<p>Returns the current region: If this code is running on a Worker, returns the region of this worker.\nIf the code is running elsewhere, returns the default region configured.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_factory", "modulename": "practicuscore", "qualname": "region_factory", "kind": "function", "doc": "<p>Instantiates a region using worker configuration, or returns default region if no configuration provided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Path of worker configuration json, a json string, dictionary, or none if you would like to use default region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.set_default_region", "modulename": "practicuscore", "qualname": "set_default_region", "kind": "function", "doc": "<p>Changes the default region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in 'username@region_address' or 'region_address' format.\nE.g. 'alice@practicus.wonderland.com' or 'practicus.wonderland.com' if there's only one logged in user for this region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.get_local_worker", "modulename": "practicuscore", "qualname": "get_local_worker", "kind": "function", "doc": "<p>Gets a reference to the Practicus AI Worker that this code is running on.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.create_worker", "modulename": "practicuscore", "qualname": "create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod using the current region.\nTo use a different region, instantiate a region and call it's create_worker() method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n<li><strong>wait_until_ready</strong>:  Waits until worker gets ready</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wait_until_ready</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.create_workspace", "modulename": "practicuscore", "qualname": "create_workspace", "kind": "function", "doc": "<p>Creates a new Practicus AI Workspace by launching a new Kubernetes pod and current or remote region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Workspace configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of type workspace of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.get_or_create_worker", "modulename": "practicuscore", "qualname": "get_or_create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod using the current region.\nTo use a different region, instantiate a region and call it's create_worker() method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.run_task", "modulename": "practicuscore", "qualname": "run_task", "kind": "function", "doc": "<p>Runs a task on a 'remote worker'. A task can be any type of code, including Practicus AI generated.\nPlease do not call this method to run code on current worker.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  A .py python or .sh script file to run on the worker</li>\n<li><strong>files_path</strong>:  Directory of all the files to upload to remote worker, code files, configuration files.\nLeave empty for current directory.</li>\n<li><strong>worker_config</strong>:  Remote worker configuration</li>\n<li><strong>terminate_on_completion</strong>:  Terminate the worker that was created to run the task.</li>\n<li><strong>capture_task_output</strong>:  If True, captures and logs stdout and stderr of the task .sh script or .py code.</li>\n<li><strong>python_venv_name</strong>:  If set, uses the python virtual environment located under ~/.venv/</li>\n<li><strong>max_files_to_upload</strong>:  Maximum number of task files to upload to worker from the files_path.\nPlease increase with caution, and prefer to place larger number of files to:\n1) on my/shared folders or 2) on git and pull after worker is started.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple of (Worker that was created to run the task, task success boolean)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminate_on_completion</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">capture_task_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">python_venv_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_files_to_upload</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager", "modulename": "practicuscore.region_manager", "kind": "module", "doc": "<h1 id=\"region\">Region</h1>\n\n<p>This module helps you work on a selected Practicus AI Region.</p>\n"}, {"fullname": "practicuscore.region_manager.Region", "modulename": "practicuscore.region_manager", "qualname": "Region", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "practicuscore.region_manager.Region.__init__", "modulename": "practicuscore.region_manager", "qualname": "Region.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">access_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "practicuscore.region_manager.Region.logger", "modulename": "practicuscore.region_manager", "qualname": "Region.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger practicus.core.sdk (DEBUG)&gt;"}, {"fullname": "practicuscore.region_manager.Region.url", "modulename": "practicuscore.region_manager", "qualname": "Region.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "practicuscore.region_manager.Region.email", "modulename": "practicuscore.region_manager", "qualname": "Region.email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.region_manager.Region.username", "modulename": "practicuscore.region_manager", "qualname": "Region.username", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.region_manager.Region.refresh_token", "modulename": "practicuscore.region_manager", "qualname": "Region.refresh_token", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "practicuscore.region_manager.Region.get_csv_header", "modulename": "practicuscore.region_manager", "qualname": "Region.get_csv_header", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.host_dns", "modulename": "practicuscore.region_manager", "qualname": "Region.host_dns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "practicuscore.region_manager.Region.key", "modulename": "practicuscore.region_manager", "qualname": "Region.key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "practicuscore.region_manager.Region.is_default", "modulename": "practicuscore.region_manager", "qualname": "Region.is_default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "practicuscore.region_manager.Region.get_k8s_region", "modulename": "practicuscore.region_manager", "qualname": "Region.get_k8s_region", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">cloud_def</span><span class=\"o\">.</span><span class=\"n\">K8sRegion</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.worker_list", "modulename": "practicuscore.region_manager", "qualname": "Region.worker_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.worker_manager.Worker]"}, {"fullname": "practicuscore.region_manager.Region.reload_worker_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_worker_list", "kind": "function", "doc": "<p>Reloads the worker list</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>service_type: Service type to filter</strong>:  e.g. cloud_worker, workspace. If none, returns all</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">service_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_default_worker_size", "modulename": "practicuscore.region_manager", "qualname": "Region.get_default_worker_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_default_worker_image", "modulename": "practicuscore.region_manager", "qualname": "Region.get_default_worker_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">service_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cloud_worker&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.create_worker", "modulename": "practicuscore.region_manager", "qualname": "Region.create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod and current or remote region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n<li><strong>wait_until_ready</strong>:  Waits until worker gets ready</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wait_until_ready</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.create_workspace", "modulename": "practicuscore.region_manager", "qualname": "Region.create_workspace", "kind": "function", "doc": "<p>Creates a new Practicus AI Workspace by launching a new Kubernetes pod using current or remote region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Workspace configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of type workspace of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_local_worker", "modulename": "practicuscore.region_manager", "qualname": "Region.get_local_worker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_or_create_worker", "modulename": "practicuscore.region_manager", "qualname": "Region.get_or_create_worker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">service_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cloud_worker&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.model_prefix_list", "modulename": "practicuscore.region_manager", "qualname": "Region.model_prefix_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.api_k8s.ModelPrefix]"}, {"fullname": "practicuscore.region_manager.Region.model_list", "modulename": "practicuscore.region_manager", "qualname": "Region.model_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.api_k8s.ModelMeta]"}, {"fullname": "practicuscore.region_manager.Region.app_list", "modulename": "practicuscore.region_manager", "qualname": "Region.app_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.api_k8s.AppMeta]"}, {"fullname": "practicuscore.region_manager.Region.app_prefix_list", "modulename": "practicuscore.region_manager", "qualname": "Region.app_prefix_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.api_k8s.AppPrefix]"}, {"fullname": "practicuscore.region_manager.Region.reload_model_prefix_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_model_prefix_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.reload_model_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_model_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.reload_app_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_app_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.reload_app_prefix_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_app_prefix_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.model_deployment_list", "modulename": "practicuscore.region_manager", "qualname": "Region.model_deployment_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.api_k8s.ModelDeployment]"}, {"fullname": "practicuscore.region_manager.Region.app_deployment_setting_list", "modulename": "practicuscore.region_manager", "qualname": "Region.app_deployment_setting_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.api_k8s.AppDeploymentSetting]"}, {"fullname": "practicuscore.region_manager.Region.reload_model_deployment_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_model_deployment_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.reload_app_deployment_setting_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_app_deployment_setting_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.deploy_model", "modulename": "practicuscore.region_manager", "qualname": "Region.deploy_model", "kind": "function", "doc": "<p>Deploys a ML model to this region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>deployment_key</strong>:  Deployment key, as defined by your admin</li>\n<li><strong>prefix</strong>:  Model prefix</li>\n<li><strong>model_name</strong>:  Model name</li>\n<li><strong>model_dir</strong>:  Model files directory, or None for current dir</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">deployment_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.deploy_app", "modulename": "practicuscore.region_manager", "qualname": "Region.deploy_app", "kind": "function", "doc": "<p>Deploys an app to this region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>deployment_setting_key</strong>:  Deployment setting key, as defined by your admin</li>\n<li><strong>prefix</strong>:  app prefix</li>\n<li><strong>app_name</strong>:  App name</li>\n<li><strong>app_dir</strong>:  App files directory, or None for current dir</li>\n<li><strong>visible_name</strong>:  The app name that end users see</li>\n<li><strong>description</strong>:  Short description of what the app does</li>\n<li><strong>icon</strong>:  Font awesome icon name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[URL of UI, URL of API]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">deployment_setting_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">visible_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.delete_app", "modulename": "practicuscore.region_manager", "qualname": "Region.delete_app", "kind": "function", "doc": "<p>Deletes an app at the current region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app_id</strong>:  App id number. If provided, only this number is used and other params are ignored</li>\n<li><strong>prefix</strong>:  App prefix, if App id is not known.</li>\n<li><strong>app_name</strong>:  App name, if App id is not known.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Nothing if successful, or else raises an exception</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.delete_app_version", "modulename": "practicuscore.region_manager", "qualname": "Region.delete_app_version", "kind": "function", "doc": "<p>Deletes an app version at the current region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>version</strong>:  App version to delete</li>\n<li><strong>app_id</strong>:  App id number. If provided, only this number is used and other params are ignored</li>\n<li><strong>prefix</strong>:  App prefix, if App id is not known.</li>\n<li><strong>app_name</strong>:  App name, if App id is not known.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Nothing if successful, or else raises an exception</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.deploy_workflow", "modulename": "practicuscore.region_manager", "qualname": "Region.deploy_workflow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">service_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dag_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_files_to_upload</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.logout", "modulename": "practicuscore.region_manager", "qualname": "Region.logout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.set_default", "modulename": "practicuscore.region_manager", "qualname": "Region.set_default", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.run_task", "modulename": "practicuscore.region_manager", "qualname": "Region.run_task", "kind": "function", "doc": "<p>Runs a task on a 'remote worker'. A task can be any type of code, including Practicus AI generated.\nPlease do not call this method to run code on current worker.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  A .py python or .sh script file to run on the worker</li>\n<li><strong>files_path</strong>:  Directory of all the files to upload to remote worker, code files, configuration files.\nLeave empty for current directory.</li>\n<li><strong>worker_config</strong>:  Remote worker configuration</li>\n<li><strong>terminate_on_completion</strong>:  Terminate the worker that was created to run the task.</li>\n<li><strong>capture_task_output</strong>:  If True, captures and logs stdout and stderr of the task .sh script or .py code.</li>\n<li><strong>python_venv_name</strong>:  If set, uses the python virtual environment located under ~/.venv/</li>\n<li><strong>max_files_to_upload</strong>:  Maximum number of task files to upload to worker from the files_path.\nPlease increase with caution, and prefer to place larger number of files to:\n1) on my/shared folders or 2) on git and pull after worker is started.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple of (Worker that was created to run the task, task success boolean)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminate_on_completion</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">capture_task_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">python_venv_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_files_to_upload</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_model_api_session_token", "modulename": "practicuscore.region_manager", "qualname": "Region.get_model_api_session_token", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">api_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">for_upload</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_app_api_session_token", "modulename": "practicuscore.region_manager", "qualname": "Region.get_app_api_session_token", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">api_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">for_upload</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.addon_list", "modulename": "practicuscore.region_manager", "qualname": "Region.addon_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.addon_helper.AddOn]"}, {"fullname": "practicuscore.region_manager.Region.reload_addon_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_addon_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_addon", "modulename": "practicuscore.region_manager", "qualname": "Region.get_addon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">addon_helper</span><span class=\"o\">.</span><span class=\"n\">AddOn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.open_addon", "modulename": "practicuscore.region_manager", "qualname": "Region.open_addon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_worker", "modulename": "practicuscore.region_manager", "qualname": "Region.get_worker", "kind": "function", "doc": "<p>Finds a worker in this region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_name_or_num</strong>:  E.g. Worker-123 or just 123</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker, if found, else None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">worker_name_or_num</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_connection", "modulename": "practicuscore.region_manager", "qualname": "Region.get_connection", "kind": "function", "doc": "<p>Finds the data source connection in the active region, available to the logged-in user.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uuid_or_name</strong>:  Globally unique id (uuid) or connection name.\nPlease note that connection names are not unique and can be renamed later.\nFor production deployments, prefer uuid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Connection, if found, else None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uuid_or_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">conn_helper</span><span class=\"o\">.</span><span class=\"n\">Connection</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.remove_worker_from_cache", "modulename": "practicuscore.region_manager", "qualname": "Region.remove_worker_from_cache", "kind": "function", "doc": "<p>For internal use. Please use terminate_worker(), which will also remove from cache</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_name</strong>:  Worker name to remove from cache</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">worker_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.terminate_worker", "modulename": "practicuscore.region_manager", "qualname": "Region.terminate_worker", "kind": "function", "doc": "<p>Terminates a worker in this region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_name_or_num</strong>:  E.g. Worker-123 or just 123</li>\n<li><strong>all_workers</strong>:  If True, terminates all workers</li>\n<li><strong>instance_id: Eg</strong>:  1234abcd</li>\n<li><strong>stop_reason</strong>:  Stop reason for backend logs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">worker_name_or_num</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_workers</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stop_reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;sdk_requested&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_groups", "modulename": "practicuscore.region_manager", "qualname": "Region.get_groups", "kind": "function", "doc": "<p>Gets current logged-in user's group names</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of string, group names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.terminate_all_workers", "modulename": "practicuscore.region_manager", "qualname": "Region.terminate_all_workers", "kind": "function", "doc": "<p>Terminates all of your workers in this region.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.connection_list", "modulename": "practicuscore.region_manager", "qualname": "Region.connection_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.conn_helper.Connection]"}, {"fullname": "practicuscore.region_manager.Region.reload_connection_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_connection_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.worker_size_list", "modulename": "practicuscore.region_manager", "qualname": "Region.worker_size_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.worker_manager.WorkerSize]"}, {"fullname": "practicuscore.region_manager.Region.reload_worker_size_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_worker_size_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.worker_image_list", "modulename": "practicuscore.region_manager", "qualname": "Region.worker_image_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": practicuscore.util.PrtList[practicuscore.worker_manager.WorkerImage]"}, {"fullname": "practicuscore.region_manager.Region.reload_worker_image_list", "modulename": "practicuscore.region_manager", "qualname": "Region.reload_worker_image_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_access_token", "modulename": "practicuscore.region_manager", "qualname": "Region.get_access_token", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_refresh_and_access_token", "modulename": "practicuscore.region_manager", "qualname": "Region.get_refresh_and_access_token", "kind": "function", "doc": "<p>Logs-in with username and, password or refresh token</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.get_workspace_credentials", "modulename": "practicuscore.region_manager", "qualname": "Region.get_workspace_credentials", "kind": "function", "doc": "<p>Returns the login password for the selected workspace.\nWorkspace Username will be your username, which is usually the user in your email E.g. this_part@company.com</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance_id</strong>:  The instance id of the workspace. You can view by calling region.worker_list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(Workspace username, password)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.recreate_model_deployment", "modulename": "practicuscore.region_manager", "qualname": "Region.recreate_model_deployment", "kind": "function", "doc": "<p><em>* You must have admin privileges on the model deployment to perform this operation *</em>\nRe-creates (first deletes, and then creates) a model deployment using existing model deployment configuration.\nThis can be a useful operation during dev/test, but not a very ideal operation in a production setting\nsince all models on this model deployment will not be available while their host is being re-created.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_deployment_key</strong>:  The instance id of the workspace. You can view by calling region.worker_list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(Workspace username, password)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_deployment_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.Region.change_password", "modulename": "practicuscore.region_manager", "qualname": "Region.change_password", "kind": "function", "doc": "<p>Changes the current logged in users password</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_password</strong>:  Old Password</li>\n<li><strong>new_password</strong>:  New Password</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions", "modulename": "practicuscore.region_manager", "qualname": "regions", "kind": "class", "doc": "<p>Convenience class to manage region related functionality.\nWraps and simplifies practicuscore.region_manager.Region</p>\n"}, {"fullname": "practicuscore.region_manager.regions.running_on_a_worker", "modulename": "practicuscore.region_manager", "qualname": "regions.running_on_a_worker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.login", "modulename": "practicuscore.region_manager", "qualname": "regions.login", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_password</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">access_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_config</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.logout", "modulename": "practicuscore.region_manager", "qualname": "regions.logout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_regions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_region_list", "modulename": "practicuscore.region_manager", "qualname": "regions.get_region_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">PrtList</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_region", "modulename": "practicuscore.region_manager", "qualname": "regions.get_region", "kind": "function", "doc": "<p>Returns the requested region. If no specific region is requested, returns the default region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in username@region_address or only region_address format.\nE.g. 'alice@practicus.wonderland.com' or just 'practicus.wonderland.com; if there's only one logged in user for this region</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_default_region", "modulename": "practicuscore.region_manager", "qualname": "regions.get_default_region", "kind": "function", "doc": "<p>Returns the default region configured by logging in using the App or SDK.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.current_region", "modulename": "practicuscore.region_manager", "qualname": "regions.current_region", "kind": "function", "doc": "<p>Returns the current region: If this code is running on a Worker, returns the region of this worker.\nIf the code is running elsewhere, returns the default region configured.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.region_factory", "modulename": "practicuscore.region_manager", "qualname": "regions.region_factory", "kind": "function", "doc": "<p>Instantiates a region using worker configuration, or returns default region if no configuration provided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Path of worker configuration json, a json string, dictionary, or none if you would like to use default region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Region</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.set_default_region", "modulename": "practicuscore.region_manager", "qualname": "regions.set_default_region", "kind": "function", "doc": "<p>Changes the default region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in 'username@region_address' or 'region_address' format.\nE.g. 'alice@practicus.wonderland.com' or 'practicus.wonderland.com' if there's only one logged in user for this region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_local_worker", "modulename": "practicuscore.region_manager", "qualname": "regions.get_local_worker", "kind": "function", "doc": "<p>Gets a reference to the Practicus AI Worker that this code is running on.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.create_worker", "modulename": "practicuscore.region_manager", "qualname": "regions.create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod using the current region.\nTo use a different region, instantiate a region and call it's create_worker() method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n<li><strong>wait_until_ready</strong>:  Waits until worker gets ready</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wait_until_ready</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.create_workspace", "modulename": "practicuscore.region_manager", "qualname": "regions.create_workspace", "kind": "function", "doc": "<p>Creates a new Practicus AI Workspace by launching a new Kubernetes pod and current or remote region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Workspace configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of type workspace of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_or_create_worker", "modulename": "practicuscore.region_manager", "qualname": "regions.get_or_create_worker", "kind": "function", "doc": "<p>Creates a new Practicus AI Worker by launching a new Kubernetes pod using the current region.\nTo use a different region, instantiate a region and call it's create_worker() method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>worker_config</strong>:  Worker configuration can be a json path, a dictionary or None to use the default config.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Worker instance of the new launched Kubernetes pod</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.run_task", "modulename": "practicuscore.region_manager", "qualname": "regions.run_task", "kind": "function", "doc": "<p>Runs a task on a 'remote worker'. A task can be any type of code, including Practicus AI generated.\nPlease do not call this method to run code on current worker.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  A .py python or .sh script file to run on the worker</li>\n<li><strong>files_path</strong>:  Directory of all the files to upload to remote worker, code files, configuration files.\nLeave empty for current directory.</li>\n<li><strong>worker_config</strong>:  Remote worker configuration</li>\n<li><strong>terminate_on_completion</strong>:  Terminate the worker that was created to run the task.</li>\n<li><strong>capture_task_output</strong>:  If True, captures and logs stdout and stderr of the task .sh script or .py code.</li>\n<li><strong>python_venv_name</strong>:  If set, uses the python virtual environment located under ~/.venv/</li>\n<li><strong>max_files_to_upload</strong>:  Maximum number of task files to upload to worker from the files_path.\nPlease increase with caution, and prefer to place larger number of files to:\n1) on my/shared folders or 2) on git and pull after worker is started.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple of (Worker that was created to run the task, task success boolean)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">files_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">worker_config</span><span class=\"p\">:</span> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">api_base</span><span class=\"o\">.</span><span class=\"n\">WorkerConfig</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminate_on_completion</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">capture_task_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">python_venv_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_files_to_upload</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">worker_manager</span><span class=\"o\">.</span><span class=\"n\">Worker</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.auto_login", "modulename": "practicuscore.region_manager", "qualname": "regions.auto_login", "kind": "function", "doc": "<p>Logs-in to Practicus AI, if the SDK is running on a Practicus AI compatible system such as Worker, Workspace etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.change_password", "modulename": "practicuscore.region_manager", "qualname": "regions.change_password", "kind": "function", "doc": "<p>Changes the current logged in users password</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_password</strong>:  Old Password</li>\n<li><strong>new_password</strong>:  New Password</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_access_token", "modulename": "practicuscore.region_manager", "qualname": "regions.get_access_token", "kind": "function", "doc": "<p>Gets an access token with current saved refresh token</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_refresh_and_access_token", "modulename": "practicuscore.region_manager", "qualname": "regions.get_refresh_and_access_token", "kind": "function", "doc": "<p>Gets a refresh and access token after logging-in saved credentials</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.get_workspace_credentials", "modulename": "practicuscore.region_manager", "qualname": "regions.get_workspace_credentials", "kind": "function", "doc": "<p>Returns the login password for the selected workspace.\nWorkspace Username will be your username, which is usually the user in your email E.g. this_part@company.com</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance_id</strong>:  The instance id of the workspace. You can view by calling region.worker_list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(Workspace username, password)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.regions.reset_password", "modulename": "practicuscore.region_manager", "qualname": "regions.reset_password", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password_reset_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth", "modulename": "practicuscore.region_manager", "qualname": "auth", "kind": "class", "doc": "<p>Convenience class to manage authentication/authorization functionality.\nOnly includes aliases to other classes.</p>\n"}, {"fullname": "practicuscore.region_manager.auth.set_default_region", "modulename": "practicuscore.region_manager", "qualname": "auth.set_default_region", "kind": "function", "doc": "<p>Changes the default region</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>region_key</strong>:  Region key in 'username@region_address' or 'region_address' format.\nE.g. 'alice@practicus.wonderland.com' or 'practicus.wonderland.com' if there's only one logged in user for this region.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.login", "modulename": "practicuscore.region_manager", "qualname": "auth.login", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_password</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">access_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_config</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.logout", "modulename": "practicuscore.region_manager", "qualname": "auth.logout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_regions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.auto_login", "modulename": "practicuscore.region_manager", "qualname": "auth.auto_login", "kind": "function", "doc": "<p>Logs-in to Practicus AI, if the SDK is running on a Practicus AI compatible system such as Worker, Workspace etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">practicuscore</span><span class=\"o\">.</span><span class=\"n\">region_manager</span><span class=\"o\">.</span><span class=\"n\">Region</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.change_password", "modulename": "practicuscore.region_manager", "qualname": "auth.change_password", "kind": "function", "doc": "<p>Changes the current logged in users password</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_password</strong>:  Old Password</li>\n<li><strong>new_password</strong>:  New Password</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.reset_password", "modulename": "practicuscore.region_manager", "qualname": "auth.reset_password", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password_reset_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.get_workspace_credentials", "modulename": "practicuscore.region_manager", "qualname": "auth.get_workspace_credentials", "kind": "function", "doc": "<p>Returns the login password for the selected workspace.\nWorkspace Username will be your username, which is usually the user in your email E.g. this_part@company.com</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance_id</strong>:  The instance id of the workspace. You can view by calling region.worker_list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(Workspace username, password)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.get_access_token", "modulename": "practicuscore.region_manager", "qualname": "auth.get_access_token", "kind": "function", "doc": "<p>Gets an access token with current saved refresh token</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "practicuscore.region_manager.auth.get_refresh_and_access_token", "modulename": "practicuscore.region_manager", "qualname": "auth.get_refresh_and_access_token", "kind": "function", "doc": "<p>Gets a refresh and access token after logging-in saved credentials</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>refresh_token, access_token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();